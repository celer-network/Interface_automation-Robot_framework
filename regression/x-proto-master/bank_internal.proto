// Copyright 2020 Celer Network

syntax = "proto3";
package bank;

import "error.proto";
import "bank_mobile.proto";
import "common_mobile.proto";

option java_package = "network.celer.proto.bank";
option java_outer_classname = "BankInternal";
option go_package = "github.com/celer-network/x-proto-go/bank";

service Internal {
  rpc AdminGetBalances(AdminGetBalancesRequest) returns (AdminGetBalancesResponse) {}
  rpc AdminPay(AdminPayRequest) returns (AdminPayResponse) {}
  rpc AdminAdd(AdminAddRequest) returns (AdminAddResponse) {}
  rpc AdminSwap(AdminSwapRequest) returns (AdminSwapResponse) {}
  rpc AdminGetRefidTxs(AdminGetRefidTxsRequest) returns (AdminGetRefidTxsResponse) {}
  rpc AdminDump(AdminDumpRequest) returns (AdminDumpResponse) {}
}

// Next tag: 3
message AdminGetBalancesRequest {
  string addr = 1;
  repeated common.TokenTypeEnum token_types = 2; // optional filtering
}

// Next tag: 3
message AdminGetBalancesResponse {
  err.BackendError error = 1;
  repeated TokenQuantity balances = 2;
}

// Next tag: 9
message AdminPayRequest {
  string addr = 1;
  common.TokenTypeEnum token_type = 2;
  double amount = 3;
  double max_reward = 4;
  string refid = 5;
  bytes proof = 6; // signed proof (addr/amount/token_symbol/ts)
  uint64 proofts = 7; // UTC timestamp (in seconds) used by the proof
  bool withdraw = 8; // if true, reset reward to 0
}

// Next tag: 4
message AdminPayResponse {
  err.BackendError error = 1;
  string txid = 2;
  TokenQuantity payment = 3; // floating-point payment values
}

// Next tag: 4
message AdminAddRequest {
  string addr = 1;
  TokenQuantity deposit = 2; // floating-point deposit values
  string refid = 3;
}

// Next tag: 3
message AdminAddResponse {
  err.BackendError error = 1;
  string txid = 2;
}

// Next tag: 10
message AdminSwapRequest {
  string addr = 1;
  common.TokenTypeEnum from_token_type = 2;
  common.TokenTypeEnum to_token_type = 3;
  double from_amount = 4;
  double to_amount = 5;
  double max_reward = 6;
  string refid = 7;
  bytes proof = 8; // signed proof (addr/from_amount/from_token_symbol/ts)
  uint64 proofts = 9; // UTC timestamp (in seconds) used by the proof
}

// Next tag: 2
message AdminSwapResponse {
  err.BackendError error = 1;
}

// Next tag: 3
message AdminGetRefidTxsRequest {
  string refid = 1;
  string addr = 2; // optional restriction to one address
}

// Next tag: 3
message AdminGetRefidTxsResponse {
  err.BackendError error = 1;
  repeated Transaction txs = 2;
}

// Next tag: 1
message AdminDumpRequest {
}

// Next tag: 2
message AdminDumpResponse {
  err.BackendError error = 1;
}

// --------- structured logs ---------

// Next tag: 4
enum HandlerType {
  UNDEFINED_HANLDER = 0;
  ADD_AMOUNT_HANDLER = 1;
  SWAP_AMOUNT_HANDLER = 2;
  PAY_AMOUNT_HANDLER = 3;
}

// Next tag: 6
enum EventSource {
  UNDEFINED_SOURCE = 0;
  MATCH = 1;
  TOURNAMENT = 2;
  LEAGUE = 3;
  DEPOSIT = 4;
  WITHDRAW = 5;
  // Append new source here.

  // -------------------------
  // Keep OTHERS at the end.
  OTHERS = 100000;
}

// Next tag: 4
message Quantity {
    int64 amount = 1; // integer value of "cents"
    int64 iou = 2; // integer value of "cents"
    int64 reward = 3; // integer value of "cents"
}

// Next tag: 4
message TokenDelta {
  string token_symbol = 1; // symbol in bank, e.g. "8gt", "usd"
  Quantity token_quantity = 2;
  string tx_id = 3;
}

// Next tag: 3
message TokenBalance {
  string token_symbol = 1; // symbol in bank, e.g. "8gt", "usd"
  Quantity token_quantity = 2;
}

// Next tag: 10
message BankEventMessage {
  string addr = 1;
  HandlerType type = 2;
  repeated TokenDelta token_delta = 3;
  int64 start_ts_ns = 4;
  int64 end_ts_ns = 5;
  string ref_id = 6;
  EventSource source = 7;
  repeated string errors = 8;
  repeated TokenBalance token_updated_balances = 9;
}

// Next tag: 11
message BankTx {
  string tx_id = 1;
  string addr = 2;
  common.TokenTypeEnum token_type = 3;
  double amount = 4; // change in value (+/-)
  double iou = 5; // change in value (+/-)
  double reward = 6; // change in value (+/-)
  string ref_id = 7;
  int64 ts = 8; // UTC timestamp in milliseconds
  HandlerType type = 9;
  EventSource source = 10;
}
