// Copyright 2020 Celer Network
syntax = "proto3";
package sale;

import "common_backend.proto";
import "error.proto";
import "sale_mobile.proto";

option java_package = "network.celer.proto.sale";
option java_outer_classname = "SaleInternal";
option go_package = "github.com/celer-network/x-proto-go/sale";

service Internal {
    // this method is purely "get". it does not affect a bundle's stock
    rpc GetBundle (GetBundleRequest) returns (GetBundleResponse);
    // returns INSUFFICIENT_STOCK if the given bundle is sold out
    rpc PlaceOrder (PlaceOrderRequest) returns (PlaceOrderResponse);
    // fiat should call this API when payment processing is finished
    rpc OnPayment (OnPaymentRequest) returns (OnPaymentResponse);
}

service Admin {
    rpc CreateSaleEvent (CreateSaleEventRequest) returns (SaleEventResponse);
    rpc UpdateSaleEvent (UpdateSaleEventRequest) returns (SaleEventResponse);
    rpc FetchSaleEvent (FetchSaleEventRequest) returns (SaleEventResponse);
    rpc FetchSaleEventList (FetchSaleEventListRequest) returns (FetchSaleEventListResponse);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Requests & Responses
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
message GetBundleRequest {
    int64 bundle_id = 1;
}

message GetBundleResponse {
    err.BackendError error = 1;
    SaleBundle bundle = 2;
}

message PlaceOrderRequest {
    int64 bundle_id = 1;
    string username = 2;
}

message PlaceOrderResponse {
    err.BackendError error = 1;
    SaleBundle bundle = 2;

    // returns multiple orders as the bundle can have multiple items, every item corresponds to an order
    repeated SaleOrder orders = 3;
    string encoded_order_id = 4; // this field acts as a reference id, encoded as several order ids concatenated by "," e.g. 342,343,344
}

message OnPaymentRequest {
    string encoded_order_id = 1;
    bool success = 2;
    string tx_id = 3; // the transaction id as generated by Fiat Service
}

message OnPaymentResponse {
    err.BackendError error = 1;
    repeated SaleOrder orders = 2;
}

message CreateSaleEventRequest {
    SaleEventConfig event_config = 1;
}

message SaleEventResponse {
    err.BackendError error = 1;
    SaleEventConfigWrapper event_config_wrapper = 2;
}

message UpdateSaleEventRequest {
    SaleEventConfigWrapper event_config_wrapper = 1;
}

message FetchSaleEventRequest {
    int64 id = 1;
}

message SaleEventConfigWrapper {
    int64 id = 1;
    SaleEventStatus status = 2;
    SaleEventConfig event_config = 3;
}

message FetchSaleEventListRequest {
    int64 page = 1;
    int64 page_size = 2;
}

message FetchSaleEventListResponse {
    err.BackendError error = 1;
    int64 pages = 2;
    repeated SaleEventConfigWrapper sale_event_list = 3;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Data Models
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
message SaleEventConfig {
    string title = 1;
    string description = 2;
    int64 start_time = 3; // epoch millis
    int64 visible_time = 4;
    int64 end_time = 5;
    string home_page_image = 6;
    string money_page_image = 7;
    string event_page_image = 8;
    string home_page_image_active = 9;
    string money_page_image_active = 10;
    string event_page_image_active = 11;
    repeated SaleBundleConfig bundles = 12;
    string user_query_sql = 13;
    string popup_description = 14;
    string popup_description_active = 15;
}

message SaleBundleConfig {
    int64 id = 1;
    string title = 2;
    string description = 3;
    common.Amount deposit_amount = 4;
    SaleItems sale_items = 5;
    int32 global_stock = 6; // # of bundles available initially
    int32 per_user_stock = 7; // # of bundles available per user initially
}

// wrapper message for serialization convenience
message SaleItems {
    repeated SaleItem items = 1;
}