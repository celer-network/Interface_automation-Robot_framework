# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import account_mobile_pb2 as account__mobile__pb2
# from Celer_Game.celer_games_api_regression.pythonLib.Celer_account_mobile import account_mobile_pb2 as account__mobile__pb2


class MobileStub(object):
    """This is the user account service. There are other user services
    (e.g. tagging, events), so it is not really the "user service" as
    it only manages accounts.  However, for backward-compatibility, the
    endpoint URLs have "/user/" instead of "/account/" at the top level
    of the hierarchy.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/account.Mobile/Create',
                request_serializer=account__mobile__pb2.CreateRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.CreateResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/account.Mobile/Update',
                request_serializer=account__mobile__pb2.UpdateRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.UpdateResponse.FromString,
                )
        self.GeneratePresignedURL = channel.unary_unary(
                '/account.Mobile/GeneratePresignedURL',
                request_serializer=account__mobile__pb2.GeneratePresignedURLRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GeneratePresignedURLResponse.FromString,
                )
        self.SendEmailVerificationCode = channel.unary_unary(
                '/account.Mobile/SendEmailVerificationCode',
                request_serializer=account__mobile__pb2.SendEmailVerificationCodeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SendEmailVerificationCodeResponse.FromString,
                )
        self.GetMe = channel.unary_unary(
                '/account.Mobile/GetMe',
                request_serializer=account__mobile__pb2.GetMeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetMeResponse.FromString,
                )
        self.GetUserSnip = channel.unary_unary(
                '/account.Mobile/GetUserSnip',
                request_serializer=account__mobile__pb2.GetUserSnipRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetUserSnipResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/account.Mobile/Login',
                request_serializer=account__mobile__pb2.LoginRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.LoginResponse.FromString,
                )
        self.SetEmail = channel.unary_unary(
                '/account.Mobile/SetEmail',
                request_serializer=account__mobile__pb2.SetEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetEmailResponse.FromString,
                )
        self.SetPrimaryAccountType = channel.unary_unary(
                '/account.Mobile/SetPrimaryAccountType',
                request_serializer=account__mobile__pb2.SetPrimaryAccountTypeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetPrimaryAccountTypeResponse.FromString,
                )
        self.SetVisibleUsername = channel.unary_unary(
                '/account.Mobile/SetVisibleUsername',
                request_serializer=account__mobile__pb2.SetVisibleUsernameRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetVisibleUsernameResponse.FromString,
                )
        self.VerifyEmail = channel.unary_unary(
                '/account.Mobile/VerifyEmail',
                request_serializer=account__mobile__pb2.VerifyEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.VerifyEmailResponse.FromString,
                )
        self.SetPayPalEmail = channel.unary_unary(
                '/account.Mobile/SetPayPalEmail',
                request_serializer=account__mobile__pb2.SetPayPalEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetPayPalEmailResponse.FromString,
                )
        self.VerifyPayPalEmail = channel.unary_unary(
                '/account.Mobile/VerifyPayPalEmail',
                request_serializer=account__mobile__pb2.VerifyPayPalEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.VerifyPayPalEmailResponse.FromString,
                )
        self.SetSkrillEmail = channel.unary_unary(
                '/account.Mobile/SetSkrillEmail',
                request_serializer=account__mobile__pb2.SetSkrillEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetSkrillEmailResponse.FromString,
                )
        self.VerifySkrillEmail = channel.unary_unary(
                '/account.Mobile/VerifySkrillEmail',
                request_serializer=account__mobile__pb2.VerifySkrillEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.VerifySkrillEmailResponse.FromString,
                )
        self.SetBackupStatus = channel.unary_unary(
                '/account.Mobile/SetBackupStatus',
                request_serializer=account__mobile__pb2.SetBackupStatusRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetBackupStatusResponse.FromString,
                )
        self.SetPassword = channel.unary_unary(
                '/account.Mobile/SetPassword',
                request_serializer=account__mobile__pb2.SetPasswordRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetPasswordResponse.FromString,
                )
        self.ResetPasswordStatus = channel.unary_unary(
                '/account.Mobile/ResetPasswordStatus',
                request_serializer=account__mobile__pb2.ResetPasswordStatusRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.ResetPasswordStatusResponse.FromString,
                )
        self.GetHash = channel.unary_unary(
                '/account.Mobile/GetHash',
                request_serializer=account__mobile__pb2.GetHashRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetHashResponse.FromString,
                )
        self.GetHashByPassword = channel.unary_unary(
                '/account.Mobile/GetHashByPassword',
                request_serializer=account__mobile__pb2.GetHashByPasswordRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetHashByPasswordResponse.FromString,
                )
        self.GetHashByCode = channel.unary_unary(
                '/account.Mobile/GetHashByCode',
                request_serializer=account__mobile__pb2.GetHashByCodeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetHashByCodeResponse.FromString,
                )
        self.GetRandomUsername = channel.unary_unary(
                '/account.Mobile/GetRandomUsername',
                request_serializer=account__mobile__pb2.GetRandomUsernameRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetRandomUsernameResponse.FromString,
                )
        self.GetMyUsername = channel.unary_unary(
                '/account.Mobile/GetMyUsername',
                request_serializer=account__mobile__pb2.GetMyUsernameRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.GetMyUsernameResponse.FromString,
                )
        self.SetPersonalSignature = channel.unary_unary(
                '/account.Mobile/SetPersonalSignature',
                request_serializer=account__mobile__pb2.SetPersonalSignatureRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetPersonalSignatureResponse.FromString,
                )
        self.SetGeo = channel.unary_unary(
                '/account.Mobile/SetGeo',
                request_serializer=account__mobile__pb2.SetGeoRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetGeoResponse.FromString,
                )
        self.SetBirthday = channel.unary_unary(
                '/account.Mobile/SetBirthday',
                request_serializer=account__mobile__pb2.SetBirthdayRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetBirthdayResponse.FromString,
                )
        self.SetLoginEmail = channel.unary_unary(
                '/account.Mobile/SetLoginEmail',
                request_serializer=account__mobile__pb2.SetLoginEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetLoginEmailResponse.FromString,
                )
        self.SendLoginEmailVerificationCode = channel.unary_unary(
                '/account.Mobile/SendLoginEmailVerificationCode',
                request_serializer=account__mobile__pb2.SendLoginEmailVerificationCodeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SendLoginEmailVerificationCodeResponse.FromString,
                )
        self.VerifyLoginEmailCode = channel.unary_unary(
                '/account.Mobile/VerifyLoginEmailCode',
                request_serializer=account__mobile__pb2.VerifyLoginEmailCodeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.VerifyLoginEmailCodeResponse.FromString,
                )
        self.SetEmailLoginPassword = channel.unary_unary(
                '/account.Mobile/SetEmailLoginPassword',
                request_serializer=account__mobile__pb2.SetEmailLoginPasswordRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetEmailLoginPasswordResponse.FromString,
                )
        self.SetLoginEmailAndPassword = channel.unary_unary(
                '/account.Mobile/SetLoginEmailAndPassword',
                request_serializer=account__mobile__pb2.SetLoginEmailAndPasswordRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.SetLoginEmailAndPasswordResponse.FromString,
                )
        self.ConfirmPhraseUploaded = channel.unary_unary(
                '/account.Mobile/ConfirmPhraseUploaded',
                request_serializer=account__mobile__pb2.ConfirmPhraseUploadedRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.ConfirmPhraseUploadedResponse.FromString,
                )
        self.EmailRecoverLogin = channel.unary_unary(
                '/account.Mobile/EmailRecoverLogin',
                request_serializer=account__mobile__pb2.EmailRecoverLoginRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.EmailRecoverLoginResponse.FromString,
                )
        self.EmailLogin = channel.unary_unary(
                '/account.Mobile/EmailLogin',
                request_serializer=account__mobile__pb2.EmailLoginRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.EmailLoginResponse.FromString,
                )
        self.RecoverAccountByLoginEmail = channel.unary_unary(
                '/account.Mobile/RecoverAccountByLoginEmail',
                request_serializer=account__mobile__pb2.RecoverAccountByLoginEmailRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.RecoverAccountByLoginEmailResponse.FromString,
                )
        self.VerifyEmailRecoverCode = channel.unary_unary(
                '/account.Mobile/VerifyEmailRecoverCode',
                request_serializer=account__mobile__pb2.VerifyEmailRecoverCodeRequest.SerializeToString,
                response_deserializer=account__mobile__pb2.VerifyEmailRecoverCodeResponse.FromString,
                )


class MobileServicer(object):
    """This is the user account service. There are other user services
    (e.g. tagging, events), so it is not really the "user service" as
    it only manages accounts.  However, for backward-compatibility, the
    endpoint URLs have "/user/" instead of "/account/" at the top level
    of the hierarchy.

    """

    def Create(self, request, context):
        """ERRORS: ACT_MISSING_USERNAME, ACT_INVALID_USERNAME, ACT_MISSING_ADDR,
        ACT_INVALID_ADDR, ACT_USER_ALREADY_EXISTS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GeneratePresignedURL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEmailVerificationCode(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMe(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserSnip(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """ERRORS: ACT_MISSING_USERNAME, ACT_INVALID_USERNAME, INVALID_SIGNATURE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEmail(self, request, context):
        """ERRORS: ACT_MISSING_EMAIL, ACT_EMAIL_CHANGE_FORBIDDEN
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPrimaryAccountType(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVisibleUsername(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_VISIBLE_USERNAME_EXISTS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyEmail(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_INVALID_EMAIL_VERIFICATION_CODE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPayPalEmail(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_PAYPAL_EMAIL_USED_BY_OTHERS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyPayPalEmail(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_INVALID_EMAIL_VERIFICATION_CODE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSkrillEmail(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_SKRILL_EMAIL_USED_BY_OTHERS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifySkrillEmail(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_INVALID_EMAIL_VERIFICATION_CODE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBackupStatus(self, request, context):
        """ERRORS: ACT_EMAIL_NOT_VERIFIED, ACT_PASSWORD_NOT_SET
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPassword(self, request, context):
        """ERRORS: ACT_PASSWORD_ALREADY_SET
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPasswordStatus(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_EMAIL_NOT_VERIFIED
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHash(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHashByPassword(self, request, context):
        """ERRORS: ACT_MISSING_USERNAME, ACT_INVALID_USERNAME, ACT_BAD_PASSWORD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHashByCode(self, request, context):
        """ERRORS: ACT_MISSING_USERNAME, ACT_INVALID_USERNAME, ACT_EMAIL_NOT_VERIFIED
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRandomUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyUsername(self, request, context):
        """ERRORS: ACT_INVALID_ADDR, INVALID_SIGNATURE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPersonalSignature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGeo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBirthday(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLoginEmail(self, request, context):
        """- Email backup
        SetLoginEmail->VerifyLoginEmailCode->SetEmailLoginPassword(returns upload url and pwdhash)->(upload phrase)->ConfirmPhraseUploaded
        To send code again, call SendLoginEmailVerificationCode

        - Email backup simplified flow
        SetLoginEmailAndPassword(returns upload url and pwdhash)->(upload phrase)->ConfirmPhraseUploaded
        To check if login email is verified, read the "identifier_passing_kyc" value.

        - Login
        EmailLogin
        - Account Recover
        RecoverAccountbyLoginEmail->VerifyEmailRecoverCode(returns dowload url and pwdhash)->EmailRecoverLogin->SetEmailLoginPassword(returns upload url and pwdhash)->(upload phrase)->ConfirmPhraseUploaded
        1. Use VerifyEmailRecoverCodeResponse.encrypted_phrase_download_url to fetch encrypted phrase.
        2. Use VerifyEmailRecoverCodeResponse.password_hash to decrypt the phrase. Assume that app is able to read wallet private key at this point.
        3. The rest of calling EmailRecoverLogin is similar to calling Login() flow except replacing "username" by "login_email".

        ERRORS: ACT_MISSING_EMAIL, ACT_EMAIL_CHANGE_FORBIDDEN, ACT_LOGIN_EMAIL_USED_BY_OTHERS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendLoginEmailVerificationCode(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyLoginEmailCode(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_INVALID_EMAIL_VERIFICATION_CODE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEmailLoginPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLoginEmailAndPassword(self, request, context):
        """ERRORS: ACT_INVALID_USERNAME, ACT_MISSING_EMAIL, ACT_EMAIL_CHANGE_FORBIDDEN, ACT_LOGIN_EMAIL_USED_BY_OTHERS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPhraseUploaded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmailRecoverLogin(self, request, context):
        """ERRORS: ACT_MISSING_EMAIL, ACT_INVALID_EMAIL, INVALID_SIGNATURE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmailLogin(self, request, context):
        """ERRORS: ACT_MISSING_EMAIL, ACT_INVALID_EMAIL, ACT_BAD_PASSWORD, ACT_PASSWORD_NOT_SET
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecoverAccountByLoginEmail(self, request, context):
        """Forget password and private key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyEmailRecoverCode(self, request, context):
        """ERRORS: ACT_MISSING_EMAIL, ACT_INVALID_EMAIL_VERIFICATION_CODE
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MobileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=account__mobile__pb2.CreateRequest.FromString,
                    response_serializer=account__mobile__pb2.CreateResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=account__mobile__pb2.UpdateRequest.FromString,
                    response_serializer=account__mobile__pb2.UpdateResponse.SerializeToString,
            ),
            'GeneratePresignedURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GeneratePresignedURL,
                    request_deserializer=account__mobile__pb2.GeneratePresignedURLRequest.FromString,
                    response_serializer=account__mobile__pb2.GeneratePresignedURLResponse.SerializeToString,
            ),
            'SendEmailVerificationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEmailVerificationCode,
                    request_deserializer=account__mobile__pb2.SendEmailVerificationCodeRequest.FromString,
                    response_serializer=account__mobile__pb2.SendEmailVerificationCodeResponse.SerializeToString,
            ),
            'GetMe': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMe,
                    request_deserializer=account__mobile__pb2.GetMeRequest.FromString,
                    response_serializer=account__mobile__pb2.GetMeResponse.SerializeToString,
            ),
            'GetUserSnip': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserSnip,
                    request_deserializer=account__mobile__pb2.GetUserSnipRequest.FromString,
                    response_serializer=account__mobile__pb2.GetUserSnipResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=account__mobile__pb2.LoginRequest.FromString,
                    response_serializer=account__mobile__pb2.LoginResponse.SerializeToString,
            ),
            'SetEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEmail,
                    request_deserializer=account__mobile__pb2.SetEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.SetEmailResponse.SerializeToString,
            ),
            'SetPrimaryAccountType': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPrimaryAccountType,
                    request_deserializer=account__mobile__pb2.SetPrimaryAccountTypeRequest.FromString,
                    response_serializer=account__mobile__pb2.SetPrimaryAccountTypeResponse.SerializeToString,
            ),
            'SetVisibleUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVisibleUsername,
                    request_deserializer=account__mobile__pb2.SetVisibleUsernameRequest.FromString,
                    response_serializer=account__mobile__pb2.SetVisibleUsernameResponse.SerializeToString,
            ),
            'VerifyEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyEmail,
                    request_deserializer=account__mobile__pb2.VerifyEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.VerifyEmailResponse.SerializeToString,
            ),
            'SetPayPalEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPayPalEmail,
                    request_deserializer=account__mobile__pb2.SetPayPalEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.SetPayPalEmailResponse.SerializeToString,
            ),
            'VerifyPayPalEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyPayPalEmail,
                    request_deserializer=account__mobile__pb2.VerifyPayPalEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.VerifyPayPalEmailResponse.SerializeToString,
            ),
            'SetSkrillEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSkrillEmail,
                    request_deserializer=account__mobile__pb2.SetSkrillEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.SetSkrillEmailResponse.SerializeToString,
            ),
            'VerifySkrillEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifySkrillEmail,
                    request_deserializer=account__mobile__pb2.VerifySkrillEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.VerifySkrillEmailResponse.SerializeToString,
            ),
            'SetBackupStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBackupStatus,
                    request_deserializer=account__mobile__pb2.SetBackupStatusRequest.FromString,
                    response_serializer=account__mobile__pb2.SetBackupStatusResponse.SerializeToString,
            ),
            'SetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPassword,
                    request_deserializer=account__mobile__pb2.SetPasswordRequest.FromString,
                    response_serializer=account__mobile__pb2.SetPasswordResponse.SerializeToString,
            ),
            'ResetPasswordStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPasswordStatus,
                    request_deserializer=account__mobile__pb2.ResetPasswordStatusRequest.FromString,
                    response_serializer=account__mobile__pb2.ResetPasswordStatusResponse.SerializeToString,
            ),
            'GetHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHash,
                    request_deserializer=account__mobile__pb2.GetHashRequest.FromString,
                    response_serializer=account__mobile__pb2.GetHashResponse.SerializeToString,
            ),
            'GetHashByPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHashByPassword,
                    request_deserializer=account__mobile__pb2.GetHashByPasswordRequest.FromString,
                    response_serializer=account__mobile__pb2.GetHashByPasswordResponse.SerializeToString,
            ),
            'GetHashByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHashByCode,
                    request_deserializer=account__mobile__pb2.GetHashByCodeRequest.FromString,
                    response_serializer=account__mobile__pb2.GetHashByCodeResponse.SerializeToString,
            ),
            'GetRandomUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRandomUsername,
                    request_deserializer=account__mobile__pb2.GetRandomUsernameRequest.FromString,
                    response_serializer=account__mobile__pb2.GetRandomUsernameResponse.SerializeToString,
            ),
            'GetMyUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyUsername,
                    request_deserializer=account__mobile__pb2.GetMyUsernameRequest.FromString,
                    response_serializer=account__mobile__pb2.GetMyUsernameResponse.SerializeToString,
            ),
            'SetPersonalSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPersonalSignature,
                    request_deserializer=account__mobile__pb2.SetPersonalSignatureRequest.FromString,
                    response_serializer=account__mobile__pb2.SetPersonalSignatureResponse.SerializeToString,
            ),
            'SetGeo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGeo,
                    request_deserializer=account__mobile__pb2.SetGeoRequest.FromString,
                    response_serializer=account__mobile__pb2.SetGeoResponse.SerializeToString,
            ),
            'SetBirthday': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBirthday,
                    request_deserializer=account__mobile__pb2.SetBirthdayRequest.FromString,
                    response_serializer=account__mobile__pb2.SetBirthdayResponse.SerializeToString,
            ),
            'SetLoginEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLoginEmail,
                    request_deserializer=account__mobile__pb2.SetLoginEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.SetLoginEmailResponse.SerializeToString,
            ),
            'SendLoginEmailVerificationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.SendLoginEmailVerificationCode,
                    request_deserializer=account__mobile__pb2.SendLoginEmailVerificationCodeRequest.FromString,
                    response_serializer=account__mobile__pb2.SendLoginEmailVerificationCodeResponse.SerializeToString,
            ),
            'VerifyLoginEmailCode': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyLoginEmailCode,
                    request_deserializer=account__mobile__pb2.VerifyLoginEmailCodeRequest.FromString,
                    response_serializer=account__mobile__pb2.VerifyLoginEmailCodeResponse.SerializeToString,
            ),
            'SetEmailLoginPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEmailLoginPassword,
                    request_deserializer=account__mobile__pb2.SetEmailLoginPasswordRequest.FromString,
                    response_serializer=account__mobile__pb2.SetEmailLoginPasswordResponse.SerializeToString,
            ),
            'SetLoginEmailAndPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLoginEmailAndPassword,
                    request_deserializer=account__mobile__pb2.SetLoginEmailAndPasswordRequest.FromString,
                    response_serializer=account__mobile__pb2.SetLoginEmailAndPasswordResponse.SerializeToString,
            ),
            'ConfirmPhraseUploaded': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPhraseUploaded,
                    request_deserializer=account__mobile__pb2.ConfirmPhraseUploadedRequest.FromString,
                    response_serializer=account__mobile__pb2.ConfirmPhraseUploadedResponse.SerializeToString,
            ),
            'EmailRecoverLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.EmailRecoverLogin,
                    request_deserializer=account__mobile__pb2.EmailRecoverLoginRequest.FromString,
                    response_serializer=account__mobile__pb2.EmailRecoverLoginResponse.SerializeToString,
            ),
            'EmailLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.EmailLogin,
                    request_deserializer=account__mobile__pb2.EmailLoginRequest.FromString,
                    response_serializer=account__mobile__pb2.EmailLoginResponse.SerializeToString,
            ),
            'RecoverAccountByLoginEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.RecoverAccountByLoginEmail,
                    request_deserializer=account__mobile__pb2.RecoverAccountByLoginEmailRequest.FromString,
                    response_serializer=account__mobile__pb2.RecoverAccountByLoginEmailResponse.SerializeToString,
            ),
            'VerifyEmailRecoverCode': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyEmailRecoverCode,
                    request_deserializer=account__mobile__pb2.VerifyEmailRecoverCodeRequest.FromString,
                    response_serializer=account__mobile__pb2.VerifyEmailRecoverCodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'account.Mobile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mobile(object):
    """This is the user account service. There are other user services
    (e.g. tagging, events), so it is not really the "user service" as
    it only manages accounts.  However, for backward-compatibility, the
    endpoint URLs have "/user/" instead of "/account/" at the top level
    of the hierarchy.

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/Create',
            account__mobile__pb2.CreateRequest.SerializeToString,
            account__mobile__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/Update',
            account__mobile__pb2.UpdateRequest.SerializeToString,
            account__mobile__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GeneratePresignedURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GeneratePresignedURL',
            account__mobile__pb2.GeneratePresignedURLRequest.SerializeToString,
            account__mobile__pb2.GeneratePresignedURLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendEmailVerificationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SendEmailVerificationCode',
            account__mobile__pb2.SendEmailVerificationCodeRequest.SerializeToString,
            account__mobile__pb2.SendEmailVerificationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetMe',
            account__mobile__pb2.GetMeRequest.SerializeToString,
            account__mobile__pb2.GetMeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserSnip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetUserSnip',
            account__mobile__pb2.GetUserSnipRequest.SerializeToString,
            account__mobile__pb2.GetUserSnipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/Login',
            account__mobile__pb2.LoginRequest.SerializeToString,
            account__mobile__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetEmail',
            account__mobile__pb2.SetEmailRequest.SerializeToString,
            account__mobile__pb2.SetEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPrimaryAccountType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetPrimaryAccountType',
            account__mobile__pb2.SetPrimaryAccountTypeRequest.SerializeToString,
            account__mobile__pb2.SetPrimaryAccountTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetVisibleUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetVisibleUsername',
            account__mobile__pb2.SetVisibleUsernameRequest.SerializeToString,
            account__mobile__pb2.SetVisibleUsernameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/VerifyEmail',
            account__mobile__pb2.VerifyEmailRequest.SerializeToString,
            account__mobile__pb2.VerifyEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPayPalEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetPayPalEmail',
            account__mobile__pb2.SetPayPalEmailRequest.SerializeToString,
            account__mobile__pb2.SetPayPalEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyPayPalEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/VerifyPayPalEmail',
            account__mobile__pb2.VerifyPayPalEmailRequest.SerializeToString,
            account__mobile__pb2.VerifyPayPalEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSkrillEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetSkrillEmail',
            account__mobile__pb2.SetSkrillEmailRequest.SerializeToString,
            account__mobile__pb2.SetSkrillEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifySkrillEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/VerifySkrillEmail',
            account__mobile__pb2.VerifySkrillEmailRequest.SerializeToString,
            account__mobile__pb2.VerifySkrillEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBackupStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetBackupStatus',
            account__mobile__pb2.SetBackupStatusRequest.SerializeToString,
            account__mobile__pb2.SetBackupStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetPassword',
            account__mobile__pb2.SetPasswordRequest.SerializeToString,
            account__mobile__pb2.SetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPasswordStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/ResetPasswordStatus',
            account__mobile__pb2.ResetPasswordStatusRequest.SerializeToString,
            account__mobile__pb2.ResetPasswordStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetHash',
            account__mobile__pb2.GetHashRequest.SerializeToString,
            account__mobile__pb2.GetHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHashByPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetHashByPassword',
            account__mobile__pb2.GetHashByPasswordRequest.SerializeToString,
            account__mobile__pb2.GetHashByPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHashByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetHashByCode',
            account__mobile__pb2.GetHashByCodeRequest.SerializeToString,
            account__mobile__pb2.GetHashByCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRandomUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetRandomUsername',
            account__mobile__pb2.GetRandomUsernameRequest.SerializeToString,
            account__mobile__pb2.GetRandomUsernameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMyUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/GetMyUsername',
            account__mobile__pb2.GetMyUsernameRequest.SerializeToString,
            account__mobile__pb2.GetMyUsernameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPersonalSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetPersonalSignature',
            account__mobile__pb2.SetPersonalSignatureRequest.SerializeToString,
            account__mobile__pb2.SetPersonalSignatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGeo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetGeo',
            account__mobile__pb2.SetGeoRequest.SerializeToString,
            account__mobile__pb2.SetGeoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBirthday(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetBirthday',
            account__mobile__pb2.SetBirthdayRequest.SerializeToString,
            account__mobile__pb2.SetBirthdayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLoginEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetLoginEmail',
            account__mobile__pb2.SetLoginEmailRequest.SerializeToString,
            account__mobile__pb2.SetLoginEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendLoginEmailVerificationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SendLoginEmailVerificationCode',
            account__mobile__pb2.SendLoginEmailVerificationCodeRequest.SerializeToString,
            account__mobile__pb2.SendLoginEmailVerificationCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyLoginEmailCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/VerifyLoginEmailCode',
            account__mobile__pb2.VerifyLoginEmailCodeRequest.SerializeToString,
            account__mobile__pb2.VerifyLoginEmailCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEmailLoginPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetEmailLoginPassword',
            account__mobile__pb2.SetEmailLoginPasswordRequest.SerializeToString,
            account__mobile__pb2.SetEmailLoginPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLoginEmailAndPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/SetLoginEmailAndPassword',
            account__mobile__pb2.SetLoginEmailAndPasswordRequest.SerializeToString,
            account__mobile__pb2.SetLoginEmailAndPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmPhraseUploaded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/ConfirmPhraseUploaded',
            account__mobile__pb2.ConfirmPhraseUploadedRequest.SerializeToString,
            account__mobile__pb2.ConfirmPhraseUploadedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmailRecoverLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/EmailRecoverLogin',
            account__mobile__pb2.EmailRecoverLoginRequest.SerializeToString,
            account__mobile__pb2.EmailRecoverLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EmailLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/EmailLogin',
            account__mobile__pb2.EmailLoginRequest.SerializeToString,
            account__mobile__pb2.EmailLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecoverAccountByLoginEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/RecoverAccountByLoginEmail',
            account__mobile__pb2.RecoverAccountByLoginEmailRequest.SerializeToString,
            account__mobile__pb2.RecoverAccountByLoginEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyEmailRecoverCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/account.Mobile/VerifyEmailRecoverCode',
            account__mobile__pb2.VerifyEmailRecoverCodeRequest.SerializeToString,
            account__mobile__pb2.VerifyEmailRecoverCodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
