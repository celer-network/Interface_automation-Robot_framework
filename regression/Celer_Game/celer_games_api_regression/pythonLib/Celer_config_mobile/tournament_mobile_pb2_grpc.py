# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

# import tournament_mobile_pb2 as tournament__mobile__pb2
from Celer_Game.celer_games_api_regression.pythonLib.Celer_config_mobile import tournament_mobile_pb2 as tournament__mobile__pb2


class MobileStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMyTournamentTickets = channel.unary_unary(
                '/tournament.Mobile/GetMyTournamentTickets',
                request_serializer=tournament__mobile__pb2.TournamentPaginationRequest.SerializeToString,
                response_deserializer=tournament__mobile__pb2.TournamentTicketsResponse.FromString,
                )
        self.GetTournamentRankings = channel.unary_unary(
                '/tournament.Mobile/GetTournamentRankings',
                request_serializer=tournament__mobile__pb2.TournamentPaginationRequest.SerializeToString,
                response_deserializer=tournament__mobile__pb2.TournamentRankingsResponse.FromString,
                )
        self.GetTournamentDetail = channel.unary_unary(
                '/tournament.Mobile/GetTournamentDetail',
                request_serializer=tournament__mobile__pb2.TournamentIdRequest.SerializeToString,
                response_deserializer=tournament__mobile__pb2.TournamentDetailResponse.FromString,
                )


class MobileServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMyTournamentTickets(self, request, context):
        """gets a paginated list of current user's ticketing history in the tournament
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTournamentRankings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTournamentDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MobileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMyTournamentTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyTournamentTickets,
                    request_deserializer=tournament__mobile__pb2.TournamentPaginationRequest.FromString,
                    response_serializer=tournament__mobile__pb2.TournamentTicketsResponse.SerializeToString,
            ),
            'GetTournamentRankings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTournamentRankings,
                    request_deserializer=tournament__mobile__pb2.TournamentPaginationRequest.FromString,
                    response_serializer=tournament__mobile__pb2.TournamentRankingsResponse.SerializeToString,
            ),
            'GetTournamentDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTournamentDetail,
                    request_deserializer=tournament__mobile__pb2.TournamentIdRequest.FromString,
                    response_serializer=tournament__mobile__pb2.TournamentDetailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tournament.Mobile', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mobile(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMyTournamentTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tournament.Mobile/GetMyTournamentTickets',
            tournament__mobile__pb2.TournamentPaginationRequest.SerializeToString,
            tournament__mobile__pb2.TournamentTicketsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTournamentRankings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tournament.Mobile/GetTournamentRankings',
            tournament__mobile__pb2.TournamentPaginationRequest.SerializeToString,
            tournament__mobile__pb2.TournamentRankingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTournamentDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tournament.Mobile/GetTournamentDetail',
            tournament__mobile__pb2.TournamentIdRequest.SerializeToString,
            tournament__mobile__pb2.TournamentDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
